// Code generated by mockery v2.43.2. DO NOT EDIT.

package make_payment

import (
	entities "github.com/CAVAh/api-tech-challenge/src/core/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockMakePaymentInterface is an autogenerated mock type for the MakePaymentInterface type
type MockMakePaymentInterface struct {
	mock.Mock
}

// ExecuteApprovedPaymentWithOrderId provides a mock function with given fields: orderId
func (_m *MockMakePaymentInterface) ExecuteApprovedPaymentWithOrderId(orderId string) (string, error) {
	ret := _m.Called(orderId)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteApprovedPaymentWithOrderId")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(orderId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteErrorPaymentWithOrderId provides a mock function with given fields: orderId
func (_m *MockMakePaymentInterface) ExecuteErrorPaymentWithOrderId(orderId string) (string, error) {
	ret := _m.Called(orderId)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteErrorPaymentWithOrderId")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(orderId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateToStatusApproved provides a mock function with given fields: payment
func (_m *MockMakePaymentInterface) UpdateToStatusApproved(payment entities.Payment) (string, error) {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateToStatusApproved")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Payment) (string, error)); ok {
		return rf(payment)
	}
	if rf, ok := ret.Get(0).(func(entities.Payment) string); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entities.Payment) error); ok {
		r1 = rf(payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockMakePaymentInterface creates a new instance of MockMakePaymentInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMakePaymentInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMakePaymentInterface {
	mock := &MockMakePaymentInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
